generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String            @unique
  username         String?           @unique
  emailVerified    DateTime?
  image            String?
  phone            String?
  bio              String?
  hashedPassword   String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  type             UserType?
  accounts         Account[]
  posts            Post[]
  likes            Like[]
  comments         Comment[]
  adoptablePets    AdoptablePet[]
  adoptionRequests AdoptionRequest[]
  lostPetReports   LostPetReport[]
  foundPetReports  FoundPetReport[]
  followerUsers    UserRelation[]    @relation("FollowerRelation")
  followingUsers   UserRelation[]    @relation("FollowingRelation")
}

enum UserType {
  PetLover
  PetAdoptionCentre
}

model UserRelation {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String @db.ObjectId
  follower    User   @relation(name: "FollowerRelation", fields: [followerId], references: [id])
  followingId String @db.ObjectId
  following   User   @relation(name: "FollowingRelation", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  description String?
  imageUrl    String
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  type        PostType
  likes       Like[]
  comments    Comment[]
}

enum PostType {
  Post
  PetSitting
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
}

model LostPetReport {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  isActive          Boolean
  animalType        String
  animalBreed       String
  petName           String
  petSex            String
  reportMessage     String
  reportDescription String
  lastSeenArea      String
  lastSeenDate      DateTime
  contactDetails    String
  imageUrl          String

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model FoundPetReport {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  isActive          Boolean
  animalType        String
  animalBreed       String
  petName           String
  petSex            String
  reportMessage     String
  reportDescription String
  foundArea         String
  foundDate         DateTime
  contactDetails    String
  imageUrl          String
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])
}

enum AdoptablePetStatus {
  Available
  Adopted
  Adopting
}

model AdoptablePet {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  type             String
  breed            String
  age              Int
  gender           String
  status           AdoptablePetStatus
  description      String
  imageUrl         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  adoptionRequests AdoptionRequest[]

  adoptionCentre   User   @relation(fields: [adoptionCentreId], references: [id])
  adoptionCentreId String @db.ObjectId
}

enum AdoptRequestStatus {
  Pending
  Approved
  Rejected
  Completed
}

model AdoptionRequest {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  message           String?
  request_status    AdoptRequestStatus
  full_name         String?
  age               Int?
  phone_number      String?
  address           String?
  type_desired      String?
  breed_desired     String?
  work_details      String?
  lifestyle_details String?
  pet_experience    String?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  adoptablePetId String       @db.ObjectId
  adoptablePet   AdoptablePet @relation(fields: [adoptablePetId], references: [id])
}
